[gd_scene load_steps=24 format=2]

[ext_resource path="res://Scenes/Levels/Hub.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scripts/Entities/Level.gd" type="Script" id=2]
[ext_resource path="res://Scenes/Interface/HUD.tscn" type="PackedScene" id=3]
[ext_resource path="res://Assets/Magic/noiseTexture.png" type="Texture" id=4]
[ext_resource path="res://Assets/Magic/perlin 23 - 128x128.png" type="Texture" id=5]
[ext_resource path="res://Assets/Magic/milky 14 - 128x128.png" type="Texture" id=6]
[ext_resource path="res://Scenes/Interface/Menus/Settings.tscn" type="PackedScene" id=7]
[ext_resource path="res://Assets/UI/Buttons/toggle-check.png" type="Texture" id=8]
[ext_resource path="res://Scenes/Interface/Menus/Pause.tscn" type="PackedScene" id=9]
[ext_resource path="res://Scripts/Entities/MainCamera.gd" type="Script" id=20]

[sub_resource type="GDScript" id=8]
script/source = "extends CanvasLayer

func _ready():
	Scene.connect(\"transition_start\",self,\"load_screen\")
	Scene.connect(\"transition_complete\",self,\"enable_ui\")

func enable_ui(state):
	var vision = get_node_or_null(\"VisionReduction\")
	var vision2 = get_node_or_null(\"VisionReduction2\")
	if vision:
		vision.visible = not state
	
	if vision2:
		vision2.visible = not state

func load_screen():
	pass
"

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform vec2 target = vec2(0.5);
uniform sampler2D noise;

uniform vec4 mask_color = vec4(1,0,0,0.3);
uniform vec2 mask_noise_scale = vec2(1);
uniform vec2 mask_noise_offset = vec2(0);
uniform vec2 mask_noise_speed = vec2(0.1);
uniform float mask_noise_strength = 0.07;

uniform float mask_radius = 0.3;
uniform vec2 mask_mask_scale = vec2(1.3,1);
uniform vec2 mask_mask_offset = vec2(-0.18,-0.03);
uniform vec4 mask_mask_color:hint_color = vec4(1,0,0,0.3);

void fragment(){
	COLOR = vec4(mask_mask_color.rgb,0);
	
	vec2 mask_noise_uv = (UV*mask_noise_scale)+((TIME*mask_noise_speed)+mask_noise_offset);
	float mask_noise_val = texture(noise,mask_noise_uv).r * mask_noise_strength;
	vec2 mask_uv = UV;
	mask_uv*=mask_mask_scale;
	mask_uv+=mask_mask_offset;
	float dist = length((mask_uv+mask_noise_val)-target);
	if (dist-mask_radius >0.0){
		COLOR = mask_mask_color;
	}
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/target = Vector2( 0.5, 0.5 )
shader_param/mask_color = Plane( 1, 0, 0, 0.3 )
shader_param/mask_noise_scale = Vector2( 1.403, 1 )
shader_param/mask_noise_offset = Vector2( 1.821, 0 )
shader_param/mask_noise_speed = Vector2( 0, 0.1 )
shader_param/mask_noise_strength = 0.282
shader_param/mask_radius = 0.364
shader_param/mask_mask_scale = Vector2( 1.3, 1 )
shader_param/mask_mask_offset = Vector2( -0.286, -0.143 )
shader_param/mask_mask_color = Color( 0.0392157, 0, 0, 0.266667 )
shader_param/noise = ExtResource( 4 )

[sub_resource type="GDScript" id=6]
script/source = "extends ColorRect
var player_node:KinematicBody2D

func _process(_delta):
	player_node= Scene.player
	var player_pos = player_node.get_global_transform_with_canvas().origin
	var target = player_pos/get_viewport_rect().size
	material.set_shader_param(\"target\",target)
"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 4 )
shader_param/target = Vector2( 0.5, 0.5 )
shader_param/mask_color = Plane( 1, 0, 0, 0.3 )
shader_param/mask_noise_scale = Vector2( 1, 1 )
shader_param/mask_noise_offset = Vector2( 1, 0 )
shader_param/mask_noise_speed = Vector2( 0, -0.1 )
shader_param/mask_noise_strength = 0.269
shader_param/mask_radius = 0.388
shader_param/mask_mask_scale = Vector2( 1.276, 0.93 )
shader_param/mask_mask_offset = Vector2( -0.26, -0.094 )
shader_param/mask_mask_color = Color( 0, 0, 0, 0.788235 )
shader_param/noise = ExtResource( 4 )

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform vec2 target = vec2(0.5);
uniform float intensity: hint_range(0.0, 1.0, 0.1);

void fragment(){
	COLOR = vec4(1);
	float x = SCREEN_PIXEL_SIZE.x/distance(vec2(target.x,UV.y),UV);
	float y = SCREEN_PIXEL_SIZE.y/distance(vec2(UV.x,target.y),UV);
	COLOR.a = (x+y)*intensity;
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/target = Vector2( 0.5, 0.5 )
shader_param/intensity = 0.2

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

uniform vec2 target = vec2(0.5);
uniform sampler2D milk;
uniform sampler2D lines;
uniform sampler2D perlin;

uniform float mask_radius = 0.3;
uniform vec2 mask_mask_scale = vec2(1.3,1);
uniform vec2 mask_mask_offset = vec2(-0.18,-0.03);
uniform vec4 mask_mask_color:hint_color = vec4(1,0,0,0.3);
uniform vec4 mask_mask_color2:hint_color = vec4(1,0,0,0.3);

uniform float smooth_a = 0.5;
uniform float smooth_b = 0.5;
void fragment(){
	COLOR = mask_mask_color;
	
	vec2 uv = UV*2.0;
	uv.y += (TIME*0.01);
	float milk_noise = smoothstep(texture(milk,UV*2.0-(TIME*0.007)).r,smooth_a,smooth_b);
	float a = mix(COLOR.a,0,milk_noise);
	
//	uv = UV*2.0;
//	uv.x += (TIME*0.01);
//	float line_noise = smoothstep(texture(lines,uv).r,smooth_a,smooth_b);
//	float b = mix(COLOR.a,0,line_noise);
	
	COLOR.a = a;
	
	//float perlin_noise = smoothstep(texture(perlin,UV*2.0+(TIME*0.01)).r,smooth_a,smooth_b);
	
//	COLOR = vec4(mask_mask_color.rgb,0);
//	vec4 screen_color = texture(SCREEN_TEXTURE,SCREEN_UV);
//	vec4 line_noise = texture(lines,UV*2.0);
//	vec4 perlin_noise = texture(perlin,UV*2.0);
//	COLOR = mix(COLOR,screen_color,line_noise);
	//COLOR = mix(COLOR,screen_color,perlin_noise);
	
//	vec2 mask_uv = UV;
//	mask_uv*=mask_mask_scale;
//	mask_uv+=mask_mask_offset;
//	float dist = length((mask_uv)-target);
//	dist = 1.0-smoothstep(smooth_a,smooth_a - smooth_b,dist);
//	COLOR.a = dist/2.5;
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/target = Vector2( 0.5, 0.5 )
shader_param/mask_radius = 0.546
shader_param/mask_mask_scale = Vector2( 1.19, 1 )
shader_param/mask_mask_offset = Vector2( -0.098, 0 )
shader_param/mask_mask_color = Color( 1, 0, 0, 0.352941 )
shader_param/mask_mask_color2 = Color( 0.184314, 0, 0, 0.937255 )
shader_param/smooth_a = 2.0
shader_param/smooth_b = 0.507
shader_param/lines = ExtResource( 6 )
shader_param/perlin = ExtResource( 5 )

[sub_resource type="GDScript" id=11]
script/source = "extends ColorRect

var total = 0.3
var curr = 0
func display_feedback():
	curr = total

func _process(delta):
	var val = lerp(0.2,2,clamp(0,1,curr/total))
	curr -= delta
	material.set_shader_param(\"smooth_a\",val)
"

[sub_resource type="GDScript" id=13]
resource_name = "MenuScript"
script/source = "extends ColorRect

enum MENU { NONE,PAUSE,SETTING }

var current = MENU.NONE

func _ready():
	pass # Replace with function body.

"

[sub_resource type="GDScript" id=12]
resource_name = "RemaingEnemies"
script/source = "extends Node2D

func _process(delta):
	var enemies = AI.get_all_enemies()
	for enemey in enemies:
		var player_node= Scene.player
		var dir:Vector2 = enemey.global_position-Scene.player.global_position
#		var dist = dir.length()
#		dir = (dir.normalized()*dist).clamped(400)
#		var player_pos = player_node.get_global_transform_with_canvas().origin
#		var target = player_pos/get_viewport_rect().size
		var test = Scene.player.global_position
		$Sprite.position = test
		break
"

[sub_resource type="Environment" id=1]
background_mode = 4
dof_blur_far_distance = 0.02
dof_blur_far_amount = 1.0
adjustment_brightness = 2.67
adjustment_contrast = 2.29

[node name="World" type="Node2D"]
process_priority = 100000000
scale = Vector2( 1, 2 )
script = ExtResource( 2 )

[node name="Managers" type="Node2D" parent="."]

[node name="Level" parent="." instance=ExtResource( 1 )]

[node name="MainCamera" type="Camera2D" parent="."]
position = Vector2( -6.10352e-05, 0 )
scale = Vector2( 1, 2 )
current = true
script = ExtResource( 20 )

[node name="UILayer" type="CanvasLayer" parent="."]
script = SubResource( 8 )

[node name="VisionReduction" type="ColorRect" parent="UILayer"]
visible = false
material = SubResource( 5 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
script = SubResource( 6 )

[node name="VisionReduction2" type="ColorRect" parent="UILayer"]
visible = false
material = SubResource( 7 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
script = SubResource( 6 )

[node name="UI" type="Control" parent="UILayer"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2

[node name="HUD" parent="UILayer/UI" instance=ExtResource( 3 )]

[node name="Retical" type="ColorRect" parent="UILayer/UI"]
visible = false
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2

[node name="DamageFeedback" type="ColorRect" parent="UILayer/UI"]
visible = false
material = SubResource( 10 )
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 11 )

[node name="Menus" type="ColorRect" parent="UILayer/UI"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0.196078, 0.196078, 0.12549, 0.192157 )
script = SubResource( 13 )

[node name="Settings" parent="UILayer/UI/Menus" instance=ExtResource( 7 )]
visible = false
anchor_top = 0.5
anchor_bottom = 0.5
margin_top = -540.0
margin_bottom = 540.0

[node name="PauseMenu" parent="UILayer/UI/Menus" instance=ExtResource( 9 )]
visible = false

[node name="Remaining Enemies" type="Node2D" parent="UILayer"]
script = SubResource( 12 )

[node name="Sprite" type="Sprite" parent="UILayer/Remaining Enemies"]
texture = ExtResource( 8 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 1 )
