[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform bool flash = false;
uniform vec4 flash_color : hint_color = vec4(1.0);
uniform vec4 line_color : hint_color = vec4(1.0);
uniform float line_thickness : hint_range(0, 10) = 1.0;

const vec2 OFFSETS[8] = {
	vec2(-1, -1), vec2(-1, 0), vec2(-1, 1), vec2(0, -1), vec2(0, 1), 
	vec2(1, -1), vec2(1, 0), vec2(1, 1)
};

uniform vec4 c_mode : hint_color = vec4(1.0);
uniform float c_strength: hint_range(0, 1) = 0.0;
//citation: https://github.com/paddy-exe/ShaderFunction-Extras/blob/main/addons/ShaderFunction-Extras/Color/color_adjustment.gdshaderinc
vec3 hsv_to_rgb(vec3 color) {
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(color.xxx + K.xyz) * 6.0 - K.www);
	return color.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), color.y);
}

//citation: https://github.com/paddy-exe/ShaderFunction-Extras/blob/main/addons/ShaderFunction-Extras/Color/color_adjustment.gdshaderinc
vec3 rgb_to_hsv(vec3 color) {
	vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = mix(vec4(color.bg, K.wz), vec4(color.gb, K.xy), step(color.b, color.g));
	vec4 q = mix(vec4(p.xyw, color.r), vec4(color.r, p.yzx), step(p.x, color.r));
	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

void fragment() {
	//OUTLINE
	vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
	float outline = 0.0;
	for (int i = 0; i < OFFSETS.length(); i++) {
		outline += texture(TEXTURE, UV + size * OFFSETS[i]).a;
	}
	outline = min(outline, 1.0);
	
	//GET THE BASE
	vec4 color = texture(TEXTURE, UV);
	
	//APPLY CONTRAST 
	//RBG->HSV
	vec3 hsv = rgb_to_hsv(color.rgb);
	vec3 hsv2 = rgb_to_hsv(c_mode.rgb);
	//LERP H of base to overlay
	hsv.x = mix(hsv.x,hsv2.x,c_strength);
	hsv.y = mix(hsv.y,hsv2.y,c_strength);
	//HSV->RGB
	color = vec4(hsv_to_rgb(hsv),color.a);
	
	//FLASH
	vec4 new_color = color;
	if (flash == true)
	{
		new_color = vec4(
			mix(new_color.rgb,(flash_color.rgb),vec3(flash_color.a)), 
			color.a); 
	}
	
	COLOR = mix(new_color, line_color, outline - new_color.a);
}"

[resource]
shader = SubResource( 1 )
shader_param/flash = false
shader_param/flash_color = Color( 1, 1, 1, 1 )
shader_param/line_color = Color( 0, 0, 0, 1 )
shader_param/line_thickness = 3.211
shader_param/c_mode = Color( 0.992157, 0.847059, 0.219608, 1 )
shader_param/c_strength = 0.0
